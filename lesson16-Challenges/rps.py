import sys
import random
from enum import Enum


def rps(name="PlayerOne"):
    """Create a Rock-Paper-Scissors game closure configured with `name`.

    Tr·∫£ v·ªÅ h√†m `play_rps()` ƒë·ªÉ caller g·ªçi khi mu·ªën b·∫Øt ƒë·∫ßu tr√≤ ch∆°i.
    """

    # Th·ªëng k√™ tr√≤ ch∆°i (l∆∞u trong closure)
    game_count = 0
    player_wins = 0
    python_wins = 0

    def play_rps():
        """H√†m n·ªôi th·ª±c hi·ªán v√≤ng ch∆°i RPS t∆∞∆°ng t√°c v·ªõi ng∆∞·ªùi d√πng."""

        # Cho ph√©p s·ª≠a bi·∫øn ·ªü scope bao ngo√†i (closure)
        nonlocal name
        nonlocal player_wins
        nonlocal python_wins

        # Enum ƒë·ªÉ bi·ªÉu di·ªÖn c√°c l·ª±a ch·ªçn thay v√¨ d√πng s·ªë tr·ª±c ti·∫øp
        class RPS(Enum):
            ROCK = 1
            PAPER = 2
            SCISSORS = 3

        # Y√™u c·∫ßu ng∆∞·ªùi ch∆°i nh·∫≠p l·ª±a ch·ªçn
        playerchoice = input(
            f"\n{name}, Enter... \n1 for Rock, \n2 for Paper, or \n3 for Scissors:\n\n"
        )

        # N·∫øu input kh√¥ng h·ª£p l·ªá, y√™u c·∫ßu nh·∫≠p l·∫°i (ƒë·ªá quy)
        if playerchoice not in ["1", "2", "3"]:
            print(f"{name}, You must enter 1, 2 or 3.")
            return play_rps()

        # Chuy·ªÉn chu·ªói sang s·ªë ƒë·ªÉ so s√°nh
        player = int(playerchoice)

        # B·∫£o v·ªá: n·∫øu s·ªë ngo√†i 1..3, tho√°t ch∆∞∆°ng tr√¨nh
        if player < 1 or player > 3:
            sys.exit("You must enter 1,2, or 3.")

        # M√°y ch·ªçn ng·∫´u nhi√™n m·ªôt trong '1','2','3'
        computerchoice = random.choice("123")
        computer = int(computerchoice)

        # In l·ª±a ch·ªçn b·∫±ng t√™n (s·ª≠ d·ª•ng Enum ƒë·ªÉ chuy·ªÉn s·ªë -> t√™n)
        print(f"\n{name}You chose {str(RPS(player)).replace('RPS.', '')}.")
        print(f"Python chose {str(RPS(computer)).replace('RPS.', '')}.\n")

        # H√†m quy·∫øt ƒë·ªãnh th·∫Øng thua cho 1 v√°n
        def decide_winner(player, computer):
            nonlocal name
            nonlocal player_wins
            nonlocal python_wins

            # Quy t·∫Øc th·∫Øng: Rock(1) > Scissors(3), Paper(2) > Rock(1), Scissors(3) > Paper(2)
            if player == 1 and computer == 3:
                player_wins += 1
                return f"üéâ {name},You win!"
            elif player == 2 and computer == 1:
                player_wins += 1
                return f"üéâ {name},You win!"
            elif player == 3 and computer == 2:
                player_wins += 1
                return f"üéâ {name},You win!"
            elif player == computer:
                return "üòäTie game!"
            else:
                python_wins += 1
                return f"üêç Python win!\nSorry, {name}"

        # L·∫•y k·∫øt qu·∫£ v√† in
        game_result = decide_winner(player, computer)
        print(game_result)

        # C·∫≠p nh·∫≠t s·ªë v√°n ƒë√£ ch∆°i v√† in th·ªëng k√™
        nonlocal game_count
        game_count += 1

        print(f"\nGame count: {game_count}")
        print(f"\n{name}'s wins: {player_wins}")
        print(f"\nPython wins:  {python_wins}")

        # H·ªèi ng∆∞·ªùi ch∆°i c√≥ mu·ªën ch∆°i ti·∫øp kh√¥ng
        print(f"\nPlay agains, {name}?")
        while True:
            playgain = input("\nY for Yes or \nQ to Quit\n")
            if playgain.lower() not in ["y", "q"]:
                continue
            else:
                break

        if playgain.lower() == "y":
            return play_rps()
        else:
            print("Thank you for playing!\n")
            sys.exit(f"Bye! {name} üëå")
            if __name__ == "__main__":
                sys.exit(f"Bye {name}")
            else:
                return

    return play_rps


if __name__ == "__main__":

    import argparse

    parser = argparse.ArgumentParser(
        description="Provides a personalized game experience."
    )

    parser.add_argument(
        "-n",
        "--name",
        metavar="name",
        required=True,
        help="The name of the person playing the game.",
    )

    args = parser.parse_args()
    rock_paper_scissors = rps(args.name)
    rock_paper_scissors()
